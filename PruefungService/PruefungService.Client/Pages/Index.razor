@page "/"
@inject IPruefungDataService PruefungService
@inject IJSRuntime JS
@using PruefungService.Client.Models
@using PruefungService.Client.Services.Interfaces
@using System.Text.Json
@using System.Text.Json.Serialization

@if (pruefungen == null || alleAufgaben == null)
{
    <p><em>Wird geladen...</em></p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}
else if (aktuellePruefungsaufgaben != null)
{
    <div class="mb-4">
        <h2>@aktuellePruefung?.Titel</h2>
        <p>Zeitlimit: @aktuellePruefung?.Zeitlimit Minuten</p>
        <p>Verbleibende Zeit: @verbleibendeZeit Sekunden</p>
        <div class="progress mb-3">
            <div class="progress-bar" role="progressbar" style="width: @zeitBalkenBreite%" aria-valuenow="@zeitBalkenBreite" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>

    <div class="row">
        @foreach (var aufgabe in aktuellePruefungsaufgaben)
        {
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Aufgabe @aufgabe.Id</h5>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@aufgabe.Frage</h5>
                        <ul class="list-group mt-3">
                            @foreach (var antwort in aufgabe.Antworten)
                            {
                                <li class="list-group-item">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="antwort-@aufgabe.Id" id="antwort-@aufgabe.Id-@antwort.Id" @onclick="() => WähleAntwort(aufgabe.Id, antwort.Id)" disabled="@pruefungBeendet">
                                        <label class="form-check-label" for="antwort-@aufgabe.Id-@antwort.Id">
                                            @antwort.Text
                                        </label>
                                        @if (pruefungBeendet && antwort.IstRichtig)
                                        {
                                            <span class="badge bg-success ms-2">Richtig</span>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="row mt-3">
        <div class="col-12">
            <button class="btn btn-primary" @onclick="PruefungBeenden" disabled="@pruefungBeendet">Prüfung abschließen</button>
            <button class="btn btn-secondary ms-2" @onclick="ZurückZuPruefungsliste">Zurück zur Übersicht</button>
        </div>
    </div>
}
else if (showCreatePruefungForm)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5>Neue Prüfung erstellen</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="titel" class="form-label">Titel</label>
                <input type="text" class="form-control" id="titel" @bind="neuePruefung.Titel" />
            </div>
            <div class="mb-3">
                <label for="datum" class="form-label">Datum</label>
                <input type="date" class="form-control" id="datum" @bind="neuePruefung.Datum" />
            </div>
            <div class="mb-3">
                <label for="zeitlimit" class="form-label">Zeitlimit (Minuten)</label>
                <input type="number" class="form-control" id="zeitlimit" @bind="neuePruefung.Zeitlimit" min="1" max="120" />
            </div>
            <div class="mb-3">
                <h6>Aufgaben auswählen:</h6>
                <div class="row">
                    @foreach (var aufgabe in alleAufgaben)
                    {
                        <div class="col-md-6 mb-2">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="aufgabe-@aufgabe.Id" 
                                       @onchange="@(e => ToggleAufgabeSelection(aufgabe.Id, e.Value != null && (bool)e.Value))" />
                                <label class="form-check-label" for="aufgabe-@aufgabe.Id">
                                    @aufgabe.Frage
                                </label>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <button class="btn btn-success" @onclick="CreatePruefung">Prüfung erstellen</button>
            <button class="btn btn-secondary ms-2" @onclick="AbortCreatePruefung">Abbrechen</button>
        </div>
    </div>
}
else if (showEditAufgabenForm && selectedPruefung != null)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5>Aufgaben für Prüfung "@selectedPruefung.Titel" bearbeiten</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <h6>Aufgaben auswählen:</h6>
                <div class="row">
                    @foreach (var aufgabe in alleAufgaben)
                    {
                        <div class="col-md-6 mb-2">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="edit-aufgabe-@aufgabe.Id" 
                                       checked="@selectedPruefungAufgabenIds.Contains(aufgabe.Id)"
                                       @onchange="@(e => ToggleEditAufgabeSelection(aufgabe.Id, e.Value != null && (bool)e.Value))" />
                                <label class="form-check-label" for="edit-aufgabe-@aufgabe.Id">
                                    @aufgabe.Frage
                                </label>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <button class="btn btn-success" @onclick="UpdatePruefungAufgaben">Änderungen speichern</button>
            <button class="btn btn-secondary ms-2" @onclick="AbortEditAufgaben">Abbrechen</button>
        </div>
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-12">
            <button class="btn btn-success" @onclick="ShowCreatePruefungForm">Neue Prüfung erstellen</button>
        </div>
    </div>

    <div class="row">
        <div class="col-12 mb-4">
            <div class="alert alert-info">
                Wählen Sie eine Prüfung aus der Liste und klicken Sie auf "Prüfung starten", um zu beginnen.
                Oder bearbeiten Sie die Aufgaben einer bestehenden Prüfung.
            </div>
        </div>
        
        @foreach (var pruefung in pruefungen)
        {
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Prüfung @pruefung.Id</h5>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@pruefung.Titel</h5>
                        <p class="card-text">
                            <strong>Datum:</strong> @pruefung.Datum.ToShortDateString()<br />
                            <strong>Zeitlimit:</strong> @pruefung.Zeitlimit Minuten<br />
                            <strong>Anzahl Aufgaben:</strong> @pruefung.AufgabenIds.Count
                        </p>
                        <div class="btn-group">
                            <button class="btn btn-primary" @onclick="() => StartePruefung(pruefung.Id)">Prüfung starten</button>
                            <button class="btn btn-secondary" @onclick="() => ShowEditAufgabenForm(pruefung)">Aufgaben bearbeiten</button>
                            <button class="btn btn-danger" @onclick="() => DeletePruefung(pruefung.Id)">Löschen</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<PruefungViewModel>? pruefungen;
    private List<AufgabeViewModel>? alleAufgaben;
    private List<AufgabeViewModel>? aktuellePruefungsaufgaben;
    private PruefungViewModel? aktuellePruefung;
    private PruefungViewModel? selectedPruefung;
    private string? errorMessage;
    
    private bool pruefungBeendet = false;
    private int verbleibendeZeit = 0;
    private double zeitBalkenBreite = 100;
    private System.Threading.Timer? timer;
    
    // Neue Prüfung erstellen
    private bool showCreatePruefungForm = false;
    private PruefungErstellenModel neuePruefung = new();
    private List<int> selectedAufgabenIds = new();
    
    // Prüfungsaufgaben bearbeiten
    private bool showEditAufgabenForm = false;
    private List<int> selectedPruefungAufgabenIds = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Lade Prüfungen und alle Aufgaben
            pruefungen = (await PruefungService.GetAllPruefungenAsync()).ToList();
            alleAufgaben = (await PruefungService.GetAllAufgabenAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Laden der Daten: {ex.Message}";
        }
    }

    private async Task StartePruefung(int pruefungId)
    {
        try
        {
            // Prüfung abrufen
            aktuellePruefung = await PruefungService.GetPruefungByIdAsync(pruefungId);
            
            // Aufgaben für diese Prüfung abrufen
            aktuellePruefungsaufgaben = (await PruefungService.GetAufgabenForPruefungAsync(pruefungId)).ToList();
            
            pruefungBeendet = false;
            
            // Timer für das Zeitlimit starten
            if (aktuellePruefung != null)
            {
                verbleibendeZeit = aktuellePruefung.Zeitlimit * 60; // Umrechnung in Sekunden
                zeitBalkenBreite = 100;
                
                // Timer für das Herunterzählen der Zeit
                timer = new System.Threading.Timer(TimerCallback, null, 0, 1000);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Starten der Prüfung: {ex.Message}";
        }
    }

    private void TimerCallback(object? state)
    {
        if (verbleibendeZeit > 0)
        {
            verbleibendeZeit--;
            
            if (aktuellePruefung != null)
            {
                zeitBalkenBreite = (double)verbleibendeZeit / (aktuellePruefung.Zeitlimit * 60) * 100;
            }
            
            InvokeAsync(StateHasChanged);
        }
        else
        {
            PruefungBeenden();
        }
    }

    private void WähleAntwort(int aufgabeId, int antwortId)
    {
        // Hier könnte die Antwort gespeichert werden
    }

    private void PruefungBeenden()
    {
        pruefungBeendet = true;
        
        // Timer stoppen
        timer?.Change(Timeout.Infinite, Timeout.Infinite);
        timer?.Dispose();
        timer = null;
        
        InvokeAsync(StateHasChanged);
    }

    private void ZurückZuPruefungsliste()
    {
        aktuellePruefungsaufgaben = null;
        aktuellePruefung = null;
        pruefungBeendet = false;
        
        // Timer stoppen falls noch aktiv
        timer?.Change(Timeout.Infinite, Timeout.Infinite);
        timer?.Dispose();
        timer = null;
    }

    // Prüfung erstellen - Formular anzeigen
    private void ShowCreatePruefungForm()
    {
        neuePruefung = new PruefungErstellenModel
        {
            Titel = string.Empty,
            Datum = DateTime.Now.AddDays(7),
            Zeitlimit = 30
        };
        selectedAufgabenIds = new List<int>();
        showCreatePruefungForm = true;
    }

    // Aufgabe zur Auswahl hinzufügen/entfernen
    private void ToggleAufgabeSelection(int aufgabeId, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedAufgabenIds.Contains(aufgabeId))
            {
                selectedAufgabenIds.Add(aufgabeId);
            }
        }
        else
        {
            selectedAufgabenIds.Remove(aufgabeId);
        }
    }

    // Neue Prüfung erstellen
    private async Task CreatePruefung()
    {
        try
        {
            neuePruefung.AufgabenIds = selectedAufgabenIds;
            
            var neuePruefungResponse = await PruefungService.CreatePruefungAsync(neuePruefung);
            
            if (neuePruefungResponse != null)
            {
                if (pruefungen != null)
                {
                    pruefungen.Add(neuePruefungResponse);
                }
                
                showCreatePruefungForm = false;
            }
            else
            {
                errorMessage = "Fehler beim Erstellen der Prüfung.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Erstellen der Prüfung: {ex.Message}";
        }
    }

    // Abbrechen beim Erstellen einer neuen Prüfung
    private void AbortCreatePruefung()
    {
        showCreatePruefungForm = false;
    }

    // Aufgaben bearbeiten - Formular anzeigen
    private void ShowEditAufgabenForm(PruefungViewModel pruefung)
    {
        selectedPruefung = pruefung;
        selectedPruefungAufgabenIds = new List<int>(pruefung.AufgabenIds);
        showEditAufgabenForm = true;
    }

    // Aufgabe zur Bearbeitung hinzufügen/entfernen
    private void ToggleEditAufgabeSelection(int aufgabeId, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedPruefungAufgabenIds.Contains(aufgabeId))
            {
                selectedPruefungAufgabenIds.Add(aufgabeId);
            }
        }
        else
        {
            selectedPruefungAufgabenIds.Remove(aufgabeId);
        }
    }

    // Prüfungsaufgaben aktualisieren
    private async Task UpdatePruefungAufgaben()
    {
        if (selectedPruefung == null)
        {
            return;
        }

        try
        {
            var aufgabenZuweisen = new AufgabenZuweisenModel
            {
                AufgabenIds = selectedPruefungAufgabenIds
            };
            
            var updatedPruefung = await PruefungService.UpdatePruefungAufgabenAsync(selectedPruefung.Id, aufgabenZuweisen);
            
            if (updatedPruefung != null)
            {
                if (pruefungen != null)
                {
                    var index = pruefungen.FindIndex(p => p.Id == updatedPruefung.Id);
                    if (index >= 0)
                    {
                        pruefungen[index] = updatedPruefung;
                    }
                }
                
                showEditAufgabenForm = false;
            }
            else
            {
                errorMessage = "Fehler beim Aktualisieren der Prüfungsaufgaben.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Aktualisieren der Prüfungsaufgaben: {ex.Message}";
        }
    }

    // Abbrechen beim Bearbeiten der Aufgaben
    private void AbortEditAufgaben()
    {
        showEditAufgabenForm = false;
    }

    // Prüfung löschen
    private async Task DeletePruefung(int pruefungId)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "Sind Sie sicher, dass Sie diese Prüfung löschen möchten?"))
        {
            return;
        }

        try
        {
            var result = await PruefungService.DeletePruefungAsync(pruefungId);
            
            if (result)
            {
                if (pruefungen != null)
                {
                    var pruefungToDelete = pruefungen.FirstOrDefault(p => p.Id == pruefungId);
                    if (pruefungToDelete != null)
                    {
                        pruefungen.Remove(pruefungToDelete);
                    }
                }
            }
            else
            {
                errorMessage = "Fehler beim Löschen der Prüfung.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Löschen der Prüfung: {ex.Message}";
        }
    }
}